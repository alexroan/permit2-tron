diff --git permit2/src/AllowanceTransfer.sol permit2-tron/contracts/AllowanceTransfer.sol
index 56c4cce..78f17a4 100644
--- permit2/src/AllowanceTransfer.sol
+++ permit2-tron/contracts/AllowanceTransfer.sol
@@ -1,16 +1,16 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 import {ERC20} from "solmate/src/tokens/ERC20.sol";
 import {SafeTransferLib} from "solmate/src/utils/SafeTransferLib.sol";
 import {PermitHash} from "./libraries/PermitHash.sol";
 import {SignatureVerification} from "./libraries/SignatureVerification.sol";
-import {EIP712} from "./EIP712.sol";
+import {TIP712} from "./TIP712.sol";
 import {IAllowanceTransfer} from "./interfaces/IAllowanceTransfer.sol";
 import {SignatureExpired, InvalidNonce} from "./PermitErrors.sol";
 import {Allowance} from "./libraries/Allowance.sol";
 
-contract AllowanceTransfer is IAllowanceTransfer, EIP712 {
+contract AllowanceTransfer is IAllowanceTransfer, TIP712 {
     using SignatureVerification for bytes;
     using SafeTransferLib for ERC20;
     using PermitHash for PermitSingle;
diff --git permit2-tron/contracts/Migrations.sol permit2-tron/contracts/Migrations.sol
new file mode 100644
index 0000000..87d493b
--- /dev/null
+++ permit2-tron/contracts/Migrations.sol
@@ -0,0 +1,16 @@
+// SPDX-License-Identifier: MIT
+pragma solidity >=0.4.22 <0.9.0;
+
+contract Migrations {
+    address public owner = msg.sender;
+    uint256 public last_completed_migration;
+
+    modifier restricted() {
+        require(msg.sender == owner, "This function is restricted to the contract's owner");
+        _;
+    }
+
+    function setCompleted(uint256 completed) public restricted {
+        last_completed_migration = completed;
+    }
+}
diff --git permit2/src/Permit2.sol permit2-tron/contracts/Permit2.sol
index 7249e40..cdbcf52 100644
--- permit2/src/Permit2.sol
+++ permit2-tron/contracts/Permit2.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 import {SignatureTransfer} from "./SignatureTransfer.sol";
 import {AllowanceTransfer} from "./AllowanceTransfer.sol";
diff --git permit2/src/PermitErrors.sol permit2-tron/contracts/PermitErrors.sol
index 2c42e2d..5038e74 100644
--- permit2/src/PermitErrors.sol
+++ permit2-tron/contracts/PermitErrors.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 /// @notice Shared errors between signature based transfers and allowance based transfers.
 
diff --git permit2/src/SignatureTransfer.sol permit2-tron/contracts/SignatureTransfer.sol
index c026553..feec4de 100644
--- permit2/src/SignatureTransfer.sol
+++ permit2-tron/contracts/SignatureTransfer.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 import {ISignatureTransfer} from "./interfaces/ISignatureTransfer.sol";
 import {SignatureExpired, InvalidNonce} from "./PermitErrors.sol";
@@ -7,9 +7,9 @@ import {ERC20} from "solmate/src/tokens/ERC20.sol";
 import {SafeTransferLib} from "solmate/src/utils/SafeTransferLib.sol";
 import {SignatureVerification} from "./libraries/SignatureVerification.sol";
 import {PermitHash} from "./libraries/PermitHash.sol";
-import {EIP712} from "./EIP712.sol";
+import {TIP712} from "./TIP712.sol";
 
-contract SignatureTransfer is ISignatureTransfer, EIP712 {
+contract SignatureTransfer is ISignatureTransfer, TIP712 {
     using SignatureVerification for bytes;
     using SafeTransferLib for ERC20;
     using PermitHash for PermitTransferFrom;
diff --git permit2/src/EIP712.sol permit2-tron/contracts/TIP712.sol
similarity index 75%
rename from permit2/src/EIP712.sol
rename to permit2-tron/contracts/TIP712.sol
index 971a03d..7d715d5 100644
--- permit2/src/EIP712.sol
+++ permit2-tron/contracts/TIP712.sol
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
-import {IEIP712} from "./interfaces/IEIP712.sol";
+import {ITIP712} from "./interfaces/ITIP712.sol";
 
-/// @notice EIP712 helpers for permit2
+/// @notice TIP712 helpers for permit2
 /// @dev Maintains cross-chain replay protection in the event of a fork
 /// @dev Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol
-contract EIP712 is IEIP712 {
+contract TIP712 is ITIP712 {
     // Cache the domain separator as an immutable value, but also store the chain id that it
     // corresponds to, in order to invalidate the cached domain separator if the chain id changes.
     bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;
@@ -17,21 +17,25 @@ contract EIP712 is IEIP712 {
         keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
 
     constructor() {
-        _CACHED_CHAIN_ID = block.chainid;
+        // TIP-712: Use masked chainId
+        _CACHED_CHAIN_ID = block.chainid & 0xffffffff;
         _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);
     }
 
     /// @notice Returns the domain separator for the current chain.
     /// @dev Uses cached version if chainid and address are unchanged from construction.
     function DOMAIN_SEPARATOR() public view override returns (bytes32) {
-        return block.chainid == _CACHED_CHAIN_ID
+        // TIP-712: Compare masked chainIds
+        return (block.chainid & 0xffffffff) == _CACHED_CHAIN_ID
             ? _CACHED_DOMAIN_SEPARATOR
             : _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME);
     }
 
     /// @notice Builds a domain separator using the current chainId and contract address.
     function _buildDomainSeparator(bytes32 typeHash, bytes32 nameHash) private view returns (bytes32) {
-        return keccak256(abi.encode(typeHash, nameHash, block.chainid, address(this)));
+        // TIP-712: Use masked chainId
+        uint256 chainId = block.chainid & 0xffffffff;
+        return keccak256(abi.encode(typeHash, nameHash, chainId, address(this)));
     }
 
     /// @notice Creates an EIP-712 typed data hash
diff --git permit2/src/interfaces/IAllowanceTransfer.sol permit2-tron/contracts/interfaces/IAllowanceTransfer.sol
index 712aa9d..a926d93 100644
--- permit2/src/interfaces/IAllowanceTransfer.sol
+++ permit2-tron/contracts/interfaces/IAllowanceTransfer.sol
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IEIP712} from "./IEIP712.sol";
+import {ITIP712} from "./ITIP712.sol";
 
 /// @title AllowanceTransfer
 /// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts
 /// @dev Requires user's token approval on the Permit2 contract
-interface IAllowanceTransfer is IEIP712 {
+interface IAllowanceTransfer is ITIP712 {
     /// @notice Thrown when an allowance on a token has expired.
     /// @param deadline The timestamp at which the allowed amount is no longer valid
     error AllowanceExpired(uint256 deadline);
diff --git permit2/src/interfaces/ISignatureTransfer.sol permit2-tron/contracts/interfaces/ISignatureTransfer.sol
index 63297c3..b62d2d6 100644
--- permit2/src/interfaces/ISignatureTransfer.sol
+++ permit2-tron/contracts/interfaces/ISignatureTransfer.sol
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IEIP712} from "./IEIP712.sol";
+import {ITIP712} from "./ITIP712.sol";
 
 /// @title SignatureTransfer
 /// @notice Handles ERC20 token transfers through signature based actions
 /// @dev Requires user's token approval on the Permit2 contract
-interface ISignatureTransfer is IEIP712 {
+interface ISignatureTransfer is ITIP712 {
     /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount
     /// @param maxAmount The maximum amount a spender can request to transfer
     error InvalidAmount(uint256 maxAmount);
diff --git permit2-tron/contracts/interfaces/ITIP712.sol permit2-tron/contracts/interfaces/ITIP712.sol
new file mode 100644
index 0000000..5ac7bff
--- /dev/null
+++ permit2-tron/contracts/interfaces/ITIP712.sol
@@ -0,0 +1,6 @@
+// SPDX-License-Identifier: MIT
+pragma solidity ^0.8.0;
+
+interface ITIP712 {
+    function DOMAIN_SEPARATOR() external view returns (bytes32);
+}
diff --git permit2/src/libraries/Allowance.sol permit2-tron/contracts/libraries/Allowance.sol
index 671c972..269f42e 100644
--- permit2/src/libraries/Allowance.sol
+++ permit2-tron/contracts/libraries/Allowance.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {IAllowanceTransfer} from "../interfaces/IAllowanceTransfer.sol";
 
diff --git permit2/src/libraries/Permit2Lib.sol permit2-tron/contracts/libraries/Permit2Lib.sol
index 0780d7c..6c25e43 100644
--- permit2/src/libraries/Permit2Lib.sol
+++ permit2-tron/contracts/libraries/Permit2Lib.sol
@@ -1,8 +1,7 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {ERC20} from "solmate/src/tokens/ERC20.sol";
-
 import {IDAIPermit} from "../interfaces/IDAIPermit.sol";
 import {IAllowanceTransfer} from "../interfaces/IAllowanceTransfer.sol";
 import {SafeCast160} from "./SafeCast160.sol";
diff --git permit2/src/libraries/PermitHash.sol permit2-tron/contracts/libraries/PermitHash.sol
index 32d4a83..e343247 100644
--- permit2/src/libraries/PermitHash.sol
+++ permit2-tron/contracts/libraries/PermitHash.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {IAllowanceTransfer} from "../interfaces/IAllowanceTransfer.sol";
 import {ISignatureTransfer} from "../interfaces/ISignatureTransfer.sol";
@@ -121,7 +121,9 @@ library PermitHash {
     }
 
     function _hashPermitDetails(IAllowanceTransfer.PermitDetails memory details) private pure returns (bytes32) {
-        return keccak256(abi.encode(_PERMIT_DETAILS_TYPEHASH, details));
+        return keccak256(
+            abi.encode(_PERMIT_DETAILS_TYPEHASH, details.token, details.amount, details.expiration, details.nonce)
+        );
     }
 
     function _hashTokenPermissions(ISignatureTransfer.TokenPermissions memory permitted)
@@ -129,6 +131,6 @@ library PermitHash {
         pure
         returns (bytes32)
     {
-        return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted));
+        return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted.token, permitted.amount));
     }
 }
diff --git permit2/src/libraries/SafeCast160.sol permit2-tron/contracts/libraries/SafeCast160.sol
index 5926036..f07401e 100644
--- permit2/src/libraries/SafeCast160.sol
+++ permit2-tron/contracts/libraries/SafeCast160.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 library SafeCast160 {
     /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160
diff --git permit2/src/libraries/SignatureVerification.sol permit2-tron/contracts/libraries/SignatureVerification.sol
index 904dfcd..e69de48 100644
--- permit2/src/libraries/SignatureVerification.sol
+++ permit2-tron/contracts/libraries/SignatureVerification.sol
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {IERC1271} from "../interfaces/IERC1271.sol";
 
diff --git permit2-tron/contracts/mocks/MockERC20.sol permit2-tron/contracts/mocks/MockERC20.sol
new file mode 100644
index 0000000..82fcfe4
--- /dev/null
+++ permit2-tron/contracts/mocks/MockERC20.sol
@@ -0,0 +1,12 @@
+// SPDX-License-Identifier: MIT
+pragma solidity 0.8.23;
+
+import {ERC20} from "solmate/src/tokens/ERC20.sol";
+
+contract MockERC20 is ERC20 {
+    constructor(string memory name, string memory symbol) ERC20(name, symbol, 18) {}
+
+    function mint(address to, uint256 amount) public {
+        _mint(to, amount);
+    }
+}
