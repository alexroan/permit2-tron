diff -ru permit2/src/AllowanceTransfer.sol permit2-tron/contracts/AllowanceTransfer.sol
--- permit2/src/AllowanceTransfer.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/AllowanceTransfer.sol	2025-08-12 13:16:55
@@ -1,16 +1,16 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 import {ERC20} from "solmate/src/tokens/ERC20.sol";
 import {SafeTransferLib} from "solmate/src/utils/SafeTransferLib.sol";
 import {PermitHash} from "./libraries/PermitHash.sol";
 import {SignatureVerification} from "./libraries/SignatureVerification.sol";
-import {EIP712} from "./EIP712.sol";
+import {TIP712} from "./TIP712.sol";
 import {IAllowanceTransfer} from "./interfaces/IAllowanceTransfer.sol";
 import {SignatureExpired, InvalidNonce} from "./PermitErrors.sol";
 import {Allowance} from "./libraries/Allowance.sol";
 
-contract AllowanceTransfer is IAllowanceTransfer, EIP712 {
+contract AllowanceTransfer is IAllowanceTransfer, TIP712 {
     using SignatureVerification for bytes;
     using SafeTransferLib for ERC20;
     using PermitHash for PermitSingle;
Only in permit2/src: EIP712.sol
Only in permit2-tron/contracts: Migrations.sol
diff -ru permit2/src/Permit2.sol permit2-tron/contracts/Permit2.sol
--- permit2/src/Permit2.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/Permit2.sol	2025-08-12 13:16:55
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 import {SignatureTransfer} from "./SignatureTransfer.sol";
 import {AllowanceTransfer} from "./AllowanceTransfer.sol";
diff -ru permit2/src/PermitErrors.sol permit2-tron/contracts/PermitErrors.sol
--- permit2/src/PermitErrors.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/PermitErrors.sol	2025-08-12 13:16:55
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 /// @notice Shared errors between signature based transfers and allowance based transfers.
 
diff -ru permit2/src/SignatureTransfer.sol permit2-tron/contracts/SignatureTransfer.sol
--- permit2/src/SignatureTransfer.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/SignatureTransfer.sol	2025-08-12 13:16:55
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity 0.8.17;
+pragma solidity 0.8.23;
 
 import {ISignatureTransfer} from "./interfaces/ISignatureTransfer.sol";
 import {SignatureExpired, InvalidNonce} from "./PermitErrors.sol";
@@ -7,9 +7,9 @@
 import {SafeTransferLib} from "solmate/src/utils/SafeTransferLib.sol";
 import {SignatureVerification} from "./libraries/SignatureVerification.sol";
 import {PermitHash} from "./libraries/PermitHash.sol";
-import {EIP712} from "./EIP712.sol";
+import {TIP712} from "./TIP712.sol";
 
-contract SignatureTransfer is ISignatureTransfer, EIP712 {
+contract SignatureTransfer is ISignatureTransfer, TIP712 {
     using SignatureVerification for bytes;
     using SafeTransferLib for ERC20;
     using PermitHash for PermitTransferFrom;
Only in permit2-tron/contracts: TIP712.sol
diff -ru permit2/src/interfaces/IAllowanceTransfer.sol permit2-tron/contracts/interfaces/IAllowanceTransfer.sol
--- permit2/src/interfaces/IAllowanceTransfer.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/interfaces/IAllowanceTransfer.sol	2025-08-01 09:41:20
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IEIP712} from "./IEIP712.sol";
+import {ITIP712} from "./ITIP712.sol";
 
 /// @title AllowanceTransfer
 /// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts
 /// @dev Requires user's token approval on the Permit2 contract
-interface IAllowanceTransfer is IEIP712 {
+interface IAllowanceTransfer is ITIP712 {
     /// @notice Thrown when an allowance on a token has expired.
     /// @param deadline The timestamp at which the allowed amount is no longer valid
     error AllowanceExpired(uint256 deadline);
diff -ru permit2/src/interfaces/ISignatureTransfer.sol permit2-tron/contracts/interfaces/ISignatureTransfer.sol
--- permit2/src/interfaces/ISignatureTransfer.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/interfaces/ISignatureTransfer.sol	2025-08-01 09:41:34
@@ -1,12 +1,12 @@
 // SPDX-License-Identifier: MIT
 pragma solidity ^0.8.0;
 
-import {IEIP712} from "./IEIP712.sol";
+import {ITIP712} from "./ITIP712.sol";
 
 /// @title SignatureTransfer
 /// @notice Handles ERC20 token transfers through signature based actions
 /// @dev Requires user's token approval on the Permit2 contract
-interface ISignatureTransfer is IEIP712 {
+interface ISignatureTransfer is ITIP712 {
     /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount
     /// @param maxAmount The maximum amount a spender can request to transfer
     error InvalidAmount(uint256 maxAmount);
Only in permit2-tron/contracts/interfaces: ITIP712.sol
diff -ru permit2/src/libraries/Allowance.sol permit2-tron/contracts/libraries/Allowance.sol
--- permit2/src/libraries/Allowance.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/libraries/Allowance.sol	2025-08-12 13:16:55
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {IAllowanceTransfer} from "../interfaces/IAllowanceTransfer.sol";
 
diff -ru permit2/src/libraries/Permit2Lib.sol permit2-tron/contracts/libraries/Permit2Lib.sol
--- permit2/src/libraries/Permit2Lib.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/libraries/Permit2Lib.sol	2025-08-12 13:16:55
@@ -1,8 +1,7 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {ERC20} from "solmate/src/tokens/ERC20.sol";
-
 import {IDAIPermit} from "../interfaces/IDAIPermit.sol";
 import {IAllowanceTransfer} from "../interfaces/IAllowanceTransfer.sol";
 import {SafeCast160} from "./SafeCast160.sol";
diff -ru permit2/src/libraries/PermitHash.sol permit2-tron/contracts/libraries/PermitHash.sol
--- permit2/src/libraries/PermitHash.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/libraries/PermitHash.sol	2025-08-12 15:34:11
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {IAllowanceTransfer} from "../interfaces/IAllowanceTransfer.sol";
 import {ISignatureTransfer} from "../interfaces/ISignatureTransfer.sol";
@@ -36,8 +36,9 @@
 
     function hash(IAllowanceTransfer.PermitSingle memory permitSingle) internal pure returns (bytes32) {
         bytes32 permitHash = _hashPermitDetails(permitSingle.details);
-        return
-            keccak256(abi.encode(_PERMIT_SINGLE_TYPEHASH, permitHash, permitSingle.spender, permitSingle.sigDeadline));
+        return keccak256(
+            abi.encode(_PERMIT_SINGLE_TYPEHASH, permitHash, uint160(permitSingle.spender), permitSingle.sigDeadline)
+        );
     }
 
     function hash(IAllowanceTransfer.PermitBatch memory permitBatch) internal pure returns (bytes32) {
@@ -50,7 +51,7 @@
             abi.encode(
                 _PERMIT_BATCH_TYPEHASH,
                 keccak256(abi.encodePacked(permitHashes)),
-                permitBatch.spender,
+                uint160(permitBatch.spender),
                 permitBatch.sigDeadline
             )
         );
@@ -59,7 +60,9 @@
     function hash(ISignatureTransfer.PermitTransferFrom memory permit) internal view returns (bytes32) {
         bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);
         return keccak256(
-            abi.encode(_PERMIT_TRANSFER_FROM_TYPEHASH, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline)
+            abi.encode(
+                _PERMIT_TRANSFER_FROM_TYPEHASH, tokenPermissionsHash, uint160(msg.sender), permit.nonce, permit.deadline
+            )
         );
     }
 
@@ -75,7 +78,7 @@
             abi.encode(
                 _PERMIT_BATCH_TRANSFER_FROM_TYPEHASH,
                 keccak256(abi.encodePacked(tokenPermissionHashes)),
-                msg.sender,
+                uint160(msg.sender),
                 permit.nonce,
                 permit.deadline
             )
@@ -90,7 +93,9 @@
         bytes32 typeHash = keccak256(abi.encodePacked(_PERMIT_TRANSFER_FROM_WITNESS_TYPEHASH_STUB, witnessTypeString));
 
         bytes32 tokenPermissionsHash = _hashTokenPermissions(permit.permitted);
-        return keccak256(abi.encode(typeHash, tokenPermissionsHash, msg.sender, permit.nonce, permit.deadline, witness));
+        return keccak256(
+            abi.encode(typeHash, tokenPermissionsHash, uint160(msg.sender), permit.nonce, permit.deadline, witness)
+        );
     }
 
     function hashWithWitness(
@@ -112,7 +117,7 @@
             abi.encode(
                 typeHash,
                 keccak256(abi.encodePacked(tokenPermissionHashes)),
-                msg.sender,
+                uint160(msg.sender),
                 permit.nonce,
                 permit.deadline,
                 witness
@@ -121,7 +126,12 @@
     }
 
     function _hashPermitDetails(IAllowanceTransfer.PermitDetails memory details) private pure returns (bytes32) {
-        return keccak256(abi.encode(_PERMIT_DETAILS_TYPEHASH, details));
+        // TIP-712: encode address as uint160
+        return keccak256(
+            abi.encode(
+                _PERMIT_DETAILS_TYPEHASH, uint160(details.token), details.amount, details.expiration, details.nonce
+            )
+        );
     }
 
     function _hashTokenPermissions(ISignatureTransfer.TokenPermissions memory permitted)
@@ -129,6 +139,7 @@
         pure
         returns (bytes32)
     {
-        return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, permitted));
+        // TIP-712: encode address as uint160
+        return keccak256(abi.encode(_TOKEN_PERMISSIONS_TYPEHASH, uint160(permitted.token), permitted.amount));
     }
 }
diff -ru permit2/src/libraries/SafeCast160.sol permit2-tron/contracts/libraries/SafeCast160.sol
--- permit2/src/libraries/SafeCast160.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/libraries/SafeCast160.sol	2025-08-12 13:16:55
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 library SafeCast160 {
     /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160
diff -ru permit2/src/libraries/SignatureVerification.sol permit2-tron/contracts/libraries/SignatureVerification.sol
--- permit2/src/libraries/SignatureVerification.sol	2025-08-01 10:32:24
+++ permit2-tron/contracts/libraries/SignatureVerification.sol	2025-08-12 13:16:55
@@ -1,5 +1,5 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.17;
+pragma solidity ^0.8.23;
 
 import {IERC1271} from "../interfaces/IERC1271.sol";
 
Only in permit2-tron/contracts: mocks
